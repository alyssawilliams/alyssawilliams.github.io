{"version":3,"sources":["components/Header.js","components/postFunctions.js","components/Post.js","components/Feed.js","components/Favorites.js","components/App.js","index.js"],"names":["Header","props","className","id","onClick","toggleTab","value","subreddit","favoritesCount","formatUrl","permalink","formatUsername","author","toLowerCase","setFavoriteButtonText","favoriteAction","document","lazyLoadInstance","LazyLoad","Post","updatefavoriteButtonClass","handleFavorite","update","time","url","this","title","upvotes","posted","image","isFavorited","favoriteIcon","favoriteButtonClass","key","role","aria-label","data-src","replace","alt","href","target","rel","moment","Date","toLocaleString","fromNow","React","Component","Feed","favoriteIDs","favoritesData","map","favorite","data","posts","feedData","post","ups","created_utc","preview","some","favoriteID","images","resolutions","Favorites","length","App","checkStorage","JSON","parse","localStorage","getItem","setState","fetchData","fetch","state","then","res","json","children","filter","undefined","imageCheck","catch","console","log","e","newActive","active","buttons","getElementsByClassName","classList","remove","getElementById","add","addFavorite","toSave","alreadySaved","savedData","find","item","storeFavorites","removeFavorite","toRemove","filteredData","setItem","stringify","ReactDOM","render"],"mappings":"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","file":"static/js/main.fb60718c.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function Header(props) {\n  return (\n    <header>\n      <button className=\"header-button feed-toggle active\" id=\"feed\" onClick={props.toggleTab} value=\"feed\">\n        <i className=\"icon fab fa-reddit-alien\"></i> /r/{props.subreddit}\n      </button>\n\n      <button className=\"header-button favorites-toggle\" id=\"favorites\" onClick={props.toggleTab} value=\"favorites\">\n        <i className=\"icon fas fa-heart\"></i> favorites ({props.favoritesCount})\n      </button>\n    </header>\n  );\n}","import moment from \"moment\";\n\nexport function formatUrl(permalink) {\n  return `https://www.reddit.com/${permalink}`;\n};\n\nexport function formatUsername(author) {\n  return `/u/${author}`.toLowerCase();\n};\n\nexport function getTimeAgo(time) {\n  return moment(new Date(time * 1000).toLocaleString()).fromNow();\n};\n\nexport function setFavoriteButtonText(favoriteAction) {\n  return (favoriteAction === 'Add') ? `${favoriteAction} to Favorites` : `${favoriteAction} from Favorites`;\n};\n\nexport function decodeImgUrl(url) {\n  return url.replace(/&amp;/g, '&');\n};","import React from \"react\";\nimport { formatUrl, formatUsername, getTimeAgo, setFavoriteButtonText, decodeImgUrl } from \"./postFunctions.js\";\nimport LazyLoad from \"vanilla-lazyload\";\n\nif (!document.lazyLoadInstance) {\n  document.lazyLoadInstance = new LazyLoad('.lazy');\n}\n\nexport default class Post extends React.Component {\n  componentDidMount() {\n    document.lazyLoadInstance.update();\n  };\n\n  componentDidUpdate() {\n    document.lazyLoadInstance.update();\n  };\n\n  updatefavoriteButtonClass = (id) => {\n    this.props.handleFavorite(id);\n  }\n\n  render() {\n    const { id, title, permalink, author, upvotes, posted, handleFavorite, favoriteAction, isFavorited, image } = this.props;\n    let favoriteIcon = favoriteAction === \"Add\" ? \"icon fas fa-heart\" : \"fas fa-trash-alt\";\n    let favoriteButtonClass = this.props.isFavorited ? \"favorite-button active\" : \"favorite-button\";\n\n    return (\n      <div className=\"post\" key={id} id={id}>\n        <div className=\"image-wrapper\">\n          <button className={favoriteButtonClass} onClick={() => this.updatefavoriteButtonClass(id)}>\n            <i className={favoriteIcon} role=\"presentation\" aria-label={setFavoriteButtonText(favoriteAction)}></i>\n          </button>\n          <img className=\"image lazy\" data-src={decodeImgUrl(image)} alt={`${formatUsername(author)}'s makeup look`} />\n        </div>\n        <a className=\"link\" href={formatUrl(permalink)} target=\"_blank\" rel=\"noopener noreferrer\">\n          <h2 className=\"title\">{title}</h2>\n        </a>\n        <div className=\"post-info\">\n          <span className=\"group author\">\n            <i className=\"icon fas fa-user\"></i>\n            {formatUsername(author)}\n          </span>\n\n          <span className=\"group posted\">\n            <span className=\"spacer\">•</span>\n            <a className=\"link\" href={formatUrl(permalink)} target=\"_blank\" rel=\"noopener noreferrer\">\n              <i className=\"icon far fa-clock\"></i>\n              {getTimeAgo(posted)}\n            </a>\n          </span>\n\n          <span className=\"group upvotes\">\n            <span className=\"spacer\">•</span>\n            <i className=\"icon fas fa-bolt\"></i>\n            {upvotes}\n          </span>\n        </div>\n      </div>\n    );\n  };\n};","import React from \"react\";\nimport Post from \"./Post.js\";\n\nexport default function Feed(props) {\n  let favoriteIDs = props.favoritesData.map(favorite => favorite.data.id);\n\n  const posts = props.feedData.map(post => {\n    const { id, title, permalink, author, ups, created_utc, preview } = post.data;\n    let isFavorited = favoriteIDs.some(favoriteID => favoriteID === id);\n\n    return (\n      <Post \n        key={id} \n        id={id}  \n        title={title}\n        permalink={permalink}\n        author={author} \n        upvotes={ups} \n        posted={created_utc}\n        image={preview.images[0].resolutions[3].url}\n        handleFavorite={props.handleFavorite}\n        favoriteAction={props.favoriteAction}\n        isFavorited={isFavorited}\n      />\n    );\n  });\n\n  return (\n    <main className=\"reddit-feed-container feed\">\n      <div>\n        <h1 className=\"heading\">Top posts</h1>\n\n        {posts}\n        \n        <div>\n          <span className=\"fin\">- fin -</span>\n        </div>\n      </div>\n    </main>\n  );\n}","import React from \"react\";\nimport Post from \"./Post.js\";\n\nexport default function Favorites(props) {\n  const posts = props.favoritesData.map(post => {\n    const { id, title, permalink, author, ups, created_utc, preview } = post.data;\n\n    return (\n      <Post \n        key={id} \n        id={id}  \n        title={title}\n        permalink={permalink}\n        author={author} \n        upvotes={ups} \n        posted={created_utc}\n        image={preview.images[0].resolutions[3].url}\n        handleFavorite={props.handleFavorite}\n        favoriteAction={props.favoriteAction}\n      />\n    );\n  });\n\n  if (posts.length !== 0) {\n    return (\n      <div className=\"reddit-feed-container favorites\">\n        <div>\n          <h1 className=\"heading\">Your favorites</h1>\n          {posts}\n        </div>\n      </div>\n    );\n  }\n  else {\n    return (\n      <div className=\"reddit-feed-container favorites\">\n        <div className=\"no-favorites\">\n          <p>No favorites yet.</p>\n        </div>\n      </div>\n    );\n  }\n};","import React from 'react';\nimport Header from './Header.js';\nimport Feed from './Feed.js';\nimport Favorites from './Favorites';\n\nexport default class App extends React.Component {\n  // Constructor\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      subreddit: \"makeupaddiction\",\n      active: \"feed\",\n      feedData: [],\n      favoritesData: []\n    };\n  };\n\n\n  // Runs on load\n  componentDidMount() {\n    this.checkStorage();\n    this.fetchData();\n  };\n\n  checkStorage = () => {\n    // Checks to see if the user's favorites data is saved in local storage\n    const favoritesData = JSON.parse(localStorage.getItem(\"favoritesData\"));\n\n    if (JSON.parse(localStorage.getItem(\"favoritesData\"))) {\n      this.setState({ \n        favoritesData: favoritesData\n      });\n    }\n  };\n\n  fetchData = () => {\n    fetch(`https://www.reddit.com/r/${this.state.subreddit}/top.json`)\n    .then(res => res.json())\n    .then((data) => {\n      let feedData = data.data.children.filter(post => {\n        // Only show posts that have large preview images\n        return imageCheck(post);\n      });\n\n      function imageCheck(post) {\n        if (post.data.preview !== undefined) {\n          // resolution - width: 640, height 1280\n          if (post.data.preview.images[0].resolutions[3] !== undefined) {\n            return post;\n          }\n        }\n      }\n\n      this.setState({ \n        feedData: feedData \n      });\n    })\n    .catch(console.log);\n  };\n\n\n  // Handles User Interaction\n  toggleTab = (e) => {\n    let newActive = e.target.value;\n\n    this.setState({\n      active: newActive\n    });\n\n    let buttons = document.getElementsByClassName(\"header-button\");\n\n    for (let button of buttons) {\n      button.classList.remove(\"active\")\n    }\n\n    document.getElementById(newActive).classList.add(\"active\");\n  };\n\n  addFavorite = (toSave) => {\n    const feedData = this.state.feedData;\n    const favoritesData = this.state.favoritesData;\n\n    let alreadySaved = favoritesData.some(savedData => {\n      return savedData.data.id === toSave;\n    });\n\n    let data = feedData.find((item) => {\n      return item.data.id === toSave;\n    });\n\n    if (!alreadySaved) {\n      this.setState({ \n        favoritesData: [...this.state.favoritesData, data]\n      }, this.storeFavorites);\n    };\n  };\n\n  removeFavorite = (toRemove) => {\n    const favoritesData = this.state.favoritesData;\n\n    let filteredData = favoritesData.filter(savedData => {\n      return savedData.data.id !== toRemove;\n    });\n\n    this.setState({ \n      favoritesData: filteredData \n    }, this.storeFavorites);\n  };\n\n  storeFavorites = () => {\n    localStorage.setItem('favoritesData', JSON.stringify(this.state.favoritesData));\n  };\n  \n\n  // Renders App component\n  render() {\n    const { subreddit, active, feedData, favoritesData } = this.state;\n    const { toggleTab, addFavorite, removeFavorite } = this;\n\n    return (\n      <div className=\"app reddit-feed\">\n        <Header subreddit={subreddit} toggleTab={toggleTab} favoritesCount={favoritesData.length} />\n\n        {active === \"feed\" ? ( \n          <Feed feedData={feedData} favoritesData={favoritesData} handleFavorite={addFavorite} favoriteAction=\"Add\" /> \n        ) : active === \"favorites\" ? ( \n          <Favorites favoritesData={favoritesData} handleFavorite={removeFavorite} favoriteAction=\"Remove\" /> \n        ) : null }\n      </div>\n    );\n  };\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App.js';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}